#ifndef RHTIME_CPPISM
#define RHTIME_CPPISM

// This is a 110-character-wide ASCII-encoded includable c++ source module. #include this file anyplace you
// need its contents. It's namespace will be whatever namespace you #include it into. This is one of those
// rare cases in which #include is used for something OTHER THAN headers, hence the odd-looking file-name 
// extenstion, cppism, which stands for "C++ Includable Source Module". If you #include this module in a
// library module, say "asdf.cpp", also #include the related header, "rhtime.cppismh", at the top of the
// header file "asdf.h" for your library module. This scheme is especially intended to handle cases in which
// multiple library modules need to call the same functions, but having one library module call functions
// from another would cause compilation headaches, and duplicating the functions would cause version-control
// nightmares. By just "including" the functions from a cppism file, those problems are all solved. 

/************************************************************************************************************\
 * rhtime.cppism
 * (see corresponding header file, "rhtime.cppismh", for prototypes)
 * This module contains functions pertaining to time.
 * Author: Robbie Hatley
 * Date written: Wednesday March 23, 2016.
\************************************************************************************************************/

#include <ctime>
#include <sstream>
#include <sys/time.h>

// Get local date from time_t time:
std::string GetDate
   (
      time_t Seconds1970,  // seconds since 00:00:00UTC on Jan 1, 1970
      int    Format        // date format: 0=micro, 1=short, 2=long
   )
{
   struct tm          * TP = NULL;
   std::ostringstream   OS ("");

   TP = localtime(&Seconds1970);
   if (NULL == TP)
   {
      cerr << "ERROR in GetDate(): localtime returned NULL pointer." << endl;
      exit(666);
   }

   if (0 == Format) // if user wants micro date format
   {
      OS << TP->tm_year + 1900 << "-"
         << setw(2) << setfill('0') << TP->tm_mon + 1 << "-"
         << setw(2) << setfill('0') << TP->tm_mday;
   }
   else if (1 == Format) // if user wants short date format
   {
      const char * ShortDays[7] = 
      {"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"};
      const char * ShortMonths[12] = 
      {"Jan", "Feb", "Mar", "Apr", "May", "Jun", 
       "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
      OS << ShortDays[TP->tm_wday] << " " 
         << ShortMonths[TP->tm_mon] << " " 
         << setw(2) << setfill('0') << TP->tm_mday << ", "
         << TP->tm_year + 1900;
   }
   else // For any other value of Format, return full-length date:
   {
      const char * LongMonths[12] = 
      {"January",   "February",  "March",     "April",     "May",       "June", 
       "July",      "August",    "September", "October",   "November",  "December"};
      const char * LongDays[7] = 
      {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
      OS << LongDays[TP->tm_wday] << " " 
         << LongMonths[TP->tm_mon] << " " 
         << setw(2) << setfill('0') << TP->tm_mday << ", "
         << TP->tm_year + 1900;
   }
   return OS.str();
}

// Get local time from time_t time:
std::string GetTime
   (
      time_t Seconds1970,  // seconds since 00:00:00UTC on Jan 1, 1970
      int    Format        // time format: 0=leading zero, 1=NO leading zero
   )
{
   struct tm           * TP         = NULL;
   int                   Hour       = 0;
   std::string           Meridien   = std::string ();
   std::ostringstream    OS         ("");

   TP = localtime(&Seconds1970);
   if (NULL == TP)
   {
      cerr << "ERROR in GetTime(): localtime returned NULL pointer." << endl;
      exit(666);
   }

   Hour       = (TP->tm_hour + 11) % 12 + 1;
   Meridien   = (TP->tm_hour < 12) ? "AM" : "PM";
   OS << setw(2) << setfill(0==Format ? '0' : ' ') << Hour << ":"
      << setw(2) << setfill('0') << TP->tm_min << ":"
      << setw(2) << setfill('0') << TP->tm_sec << Meridien;
   return OS.str();
}

// End non-inclusion of this file if RHTIME_CPPISM is already defined:
#endif
